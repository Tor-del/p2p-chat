{"version":3,"sources":["typescript-lib/index.js","types/MessageSenderEnum.ts","components/Chat/Chat.tsx","types/MessageTypeEnum.ts","util/encryption.ts","components/Space/Space.tsx","util/connectionDescriptionValidator.ts","util/connectionDescriptionEncoding.ts","components/HostOrSlave/HostOrSlave.tsx","App.tsx","components/Host/Host.tsx","components/Slave/Slave.tsx","serviceWorker.js","index.tsx"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","CHANNEL_LABEL","createPeerConnection","_a","channelInstance","remoteDescription","_b","iceServers","onChannelOpen","onMessageReceived","peerConnection","RTCPeerConnection","setAnswerDescription","answerDescription","setRemoteDescription","JSON","parse","sendMessage","message","send","res","onicecandidate","candidate","console","log","localDescription","stringify","ondatachannel","channel","onopen","onmessage","event","data","description","createAnswer","setLocalDescription","createDataChannel","error","setupChannelAsAHost","createOffer","MESSAGE_SENDER","MESSAGE_TYPE","InputForm","styled","form","Message","div","sender","ME","css","MessagesWrapper","Wrapper","Chat","messages","React","useState","messageToSend","setMessageToSend","map","key","id","payload","onSubmit","preventDefault","stopPropagation","type","placeholder","onChange","target","generateKey","passphrase","CryptoLib","WordArray","random","salt","CryptoPBKDF2","keySize","iterations","toString","Space","size","nonEmptyStringValidator","d","undefined","connectionDescriptionValidator","createVadidator","encryptionKey","encode","connectionDescription","Base64","decode","connectionDescriptionCode","Mode","HostOrSlave","onHost","onSlave","setConnectionDescription","setError","Fragment","onClick","block","connectionDescriptionObject","Error","Text","htmlType","Host","remoteConnectionDescription","setRemoteConnectionDescription","encodedConnectionDescription","Search","enterButton","onSearch","copy","Slave","DetailsValue","pre","DetailsLabel","DetailsWrapper","Version","Subtitle","Title","urls","username","credential","App","mode","setMode","isReady","setIsReady","setEncryptionKey","encryptedMessages","setEncryptedMessages","setMessages","setAnswerDescriptionRef","useRef","sendMessageRef","messageString","decryptedMessageString","string","CryptoAES","decrypt","CryptoENCUtf8","m","handleHostSelection","a","HOST","current","handleSlaveSelection","SLAVE","localConnectionDescription","textMessages","filter","TEXT","style","textAlign","Math","toFixed","STRANGER","encryptedMessageString","encrypt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28ae8e86.chunk.js","sourcesContent":["/* eslint-disable */\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar CHANNEL_LABEL = 'P2P_CHAT_CHANNEL_LABEL';\r\nfunction createPeerConnection(_a) {\r\n    var remoteDescription = _a.remoteDescription, _b = _a.iceServers, iceServers = _b === void 0 ? [] : _b, onChannelOpen = _a.onChannelOpen, onMessageReceived = _a.onMessageReceived;\r\n    var peerConnection = new RTCPeerConnection({\r\n        iceServers: iceServers,\r\n    });\r\n    var channelInstance;\r\n    function setupChannelAsAHost() {\r\n        try {\r\n            channelInstance = peerConnection.createDataChannel(CHANNEL_LABEL);\r\n            channelInstance.onopen = function () {\r\n                onChannelOpen();\r\n            };\r\n            channelInstance.onmessage = function (event) {\r\n                onMessageReceived(event.data);\r\n            };\r\n        }\r\n        catch (e) {\r\n            console.error('No data channel (peerConnection)', e);\r\n        }\r\n    }\r\n    function createOffer() {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var description;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, peerConnection.createOffer()];\r\n                    case 1:\r\n                        description = _a.sent();\r\n                        peerConnection.setLocalDescription(description);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function setupChannelAsASlave() {\r\n        peerConnection.ondatachannel = function (_a) {\r\n            var channel = _a.channel;\r\n            channelInstance = channel;\r\n            channelInstance.onopen = function () {\r\n                onChannelOpen();\r\n            };\r\n            channelInstance.onmessage = function (event) {\r\n                onMessageReceived(event.data);\r\n            };\r\n        };\r\n    }\r\n    function createAnswer(remoteDescription) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var description;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, peerConnection.setRemoteDescription(JSON.parse(remoteDescription))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, peerConnection.createAnswer()];\r\n                    case 2:\r\n                        description = _a.sent();\r\n                        peerConnection.setLocalDescription(description);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function setAnswerDescription(answerDescription) {\r\n        peerConnection.setRemoteDescription(JSON.parse(answerDescription));\r\n    }\r\n    function sendMessage(message) {\r\n        if (channelInstance) {\r\n            channelInstance.send(message);\r\n        }\r\n    }\r\n    return new Promise(function (res) {\r\n        peerConnection.onicecandidate = function (e) {\r\n            if (e.candidate === null) {\r\n                console.log(peerConnection.localDescription);\r\n                res({\r\n                    localDescription: JSON.stringify(peerConnection.localDescription),\r\n                    setAnswerDescription: setAnswerDescription,\r\n                    sendMessage: sendMessage,\r\n                });\r\n            }\r\n        };\r\n        if (!remoteDescription) {\r\n            setupChannelAsAHost();\r\n            createOffer();\r\n        }\r\n        else {\r\n            setupChannelAsASlave();\r\n            createAnswer(remoteDescription);\r\n        }\r\n    });\r\n}\n\nexport { createPeerConnection };\n","export enum MESSAGE_SENDER {\n  ME = 'ME',\n  STRANGER = 'STRANGER',\n}\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { Input } from 'antd';\nimport 'antd/es/input/style/css';\n\nimport { TextMessageType } from '../../types/TextMessageType';\nimport { MESSAGE_SENDER } from '../../types/MessageSenderEnum';\n\nexport interface ChatProps {\n  messages: TextMessageType[];\n  sendMessage: (message: string) => any;\n}\n\nconst InputForm = styled.form``;\nconst Message = styled.div<{ sender: MESSAGE_SENDER }>`\n  ${({ sender }) =>\n    sender === MESSAGE_SENDER.ME\n      ? css`\n          text-align: right;\n        `\n      : ''};\n`;\nconst MessagesWrapper = styled.div``;\nconst Wrapper = styled.div``;\n\nexport const Chat: React.FC<ChatProps> = ({ messages, sendMessage }) => {\n  const [messageToSend, setMessageToSend] = React.useState<string>('');\n\n  const handleMessageToSendInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setMessageToSend(event.target.value);\n  };\n\n  const handleMessageToSendFormSubmit: React.FormEventHandler = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    sendMessage(messageToSend);\n    setMessageToSend('');\n  };\n\n  return (\n    <Wrapper>\n      <MessagesWrapper>\n        {messages.map(message => (\n          <Message key={message.id} sender={message.sender}>\n            {message.payload}\n          </Message>\n        ))}\n      </MessagesWrapper>\n      <InputForm onSubmit={handleMessageToSendFormSubmit}>\n        <Input type=\"text\" placeholder=\"Message...\" value={messageToSend} onChange={handleMessageToSendInputChange} />\n      </InputForm>\n    </Wrapper>\n  );\n};\n","export enum MESSAGE_TYPE {\n  TEXT = 'TEXT',\n}\n","import CryptoAES from 'crypto-js/aes';\nimport CryptoENCUtf8 from 'crypto-js/enc-utf8';\nimport { lib as CryptoLib } from 'crypto-js';\nimport CryptoPBKDF2 from 'crypto-js/pbkdf2';\n\nexport function encrypt(string: string, key: string): string {\n  return CryptoAES.encrypt(string, key).toString();\n}\n\nexport function decrypt(string: string, key: string): string {\n  return CryptoAES.decrypt(string, key).toString(CryptoENCUtf8);\n}\n\nexport function generateKey(): string {\n  const passphrase = CryptoLib.WordArray.random(128 / 8);\n  const salt = CryptoLib.WordArray.random(128 / 8);\n  return CryptoPBKDF2(passphrase, salt, { keySize: 256 / 32, iterations: 1000 }).toString();\n}\n","import styled from 'styled-components';\n\nexport const Space = styled.div<{ size: number }>`\n  padding-top: ${({ size }) => `${size}px`};\n`;\n","import { createVadidator } from 'schemat';\n\nconst nonEmptyStringValidator = (d: any) => (typeof d === 'string' && d.length > 0 ? undefined : 'required');\n\nexport const connectionDescriptionValidator = createVadidator({\n  description: nonEmptyStringValidator,\n  encryptionKey: nonEmptyStringValidator,\n});\n","import { Base64 } from 'js-base64';\n\nimport { ConnectionDescription } from '../types/ConnectionDescription';\n\nexport function encode(connectionDescription: ConnectionDescription): string {\n  return Base64.encode(JSON.stringify(connectionDescription));\n}\n\nexport function decode(connectionDescriptionCode: string): ConnectionDescription {\n  return JSON.parse(Base64.decode(connectionDescriptionCode));\n}\n","import React from 'react';\n\nimport { Input } from 'antd';\nimport 'antd/es/input/style/css';\nimport { Card } from 'antd';\nimport 'antd/es/card/style/css';\nimport { Button } from 'antd';\nimport 'antd/es/button/style/css';\nimport { Typography } from 'antd';\nimport 'antd/es/typography/style/css';\n\nimport { ConnectionDescription } from '../../types/ConnectionDescription';\nimport { Space } from '../Space/Space';\nimport { connectionDescriptionValidator } from '../../util/connectionDescriptionValidator';\nimport { decode } from '../../util/connectionDescriptionEncoding';\n\nexport interface HostOrSlaveProps {\n  onHost: () => any;\n  onSlave: (connectionDescription: ConnectionDescription) => any;\n}\n\nexport const HostOrSlave: React.FC<HostOrSlaveProps> = ({ onHost, onSlave }) => {\n  const [connectionDescription, setConnectionDescription] = React.useState<string>('');\n  const [error, setError] = React.useState<string>('');\n\n  const handleHostBtnClick: React.MouseEventHandler<HTMLButtonElement> = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    onHost();\n  };\n\n  const handleConnectionDescriptionInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setError('');\n    setConnectionDescription(event.target.value);\n  };\n\n  const handleSlaveFormSubmit: React.FormEventHandler = event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    try {\n      const connectionDescriptionObject = decode(connectionDescription);\n      if (connectionDescriptionValidator(connectionDescriptionObject)) throw new Error();\n      onSlave(connectionDescriptionObject);\n    } catch (error) {\n      setError('Connection Description invalid!');\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Card>\n        <Button onClick={handleHostBtnClick} type=\"primary\" block>\n          New chat\n        </Button>\n      </Card>\n      <Space size={24} />\n      <Card>\n        <form onSubmit={handleSlaveFormSubmit}>\n          <Input\n            type=\"text\"\n            value={connectionDescription}\n            onChange={handleConnectionDescriptionInputChange}\n            placeholder=\"Paste Connection Description here...\"\n          />\n          {!!error && (\n            <React.Fragment>\n              <Space size={8} />\n              <Typography.Text>{error}</Typography.Text>\n            </React.Fragment>\n          )}\n          <Space size={12} />\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            Join a chat\n          </Button>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Base64 } from 'js-base64';\n\nimport { Card } from 'antd';\nimport 'antd/es/card/style/css';\n\nimport { createPeerConnection } from './typescript-lib';\nimport { Chat } from './components/Chat/Chat';\nimport { MessageType } from './types/MessageType';\nimport { MESSAGE_SENDER } from './types/MessageSenderEnum';\nimport { MESSAGE_TYPE } from './types/MessageTypeEnum';\nimport { encrypt, generateKey, decrypt } from './util/encryption';\nimport { HostOrSlave } from './components/HostOrSlave/HostOrSlave';\nimport { ConnectionDescription } from './types/ConnectionDescription';\nimport { Host } from './components/Host/Host';\nimport { Slave } from './components/Slave/Slave';\nimport { Space } from './components/Space/Space';\n\nenum Mode {\n  HOST = 'HOST',\n  SLAVE = 'SLAVE',\n}\n\nconst DetailsValue = styled.pre`\n  font-size: 10px;\n`;\nconst DetailsLabel = styled.div`\n  font-size: 12px;\n  font-weight: 700;\n`;\nconst DetailsWrapper = styled.div``;\nconst Version = styled.div`\n  text-align: center;\n  font-size: 10px;\n`;\nconst Subtitle = styled.div`\n  text-align: center;\n  font-size: 12px;\n`;\nconst Title = styled.div`\n  text-align: center;\n  font-size: 16px;\n  font-weight: 700;\n`;\nconst Wrapper = styled.div`\n  padding: 12px;\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nconst iceServers: RTCIceServer[] = [\n  {\n    urls: 'stun:stun.l.google.com:19302',\n  },\n  {\n    urls: 'turn:turn.anyfirewall.com:443?transport=tcp',\n    username: 'webrtc',\n    credential: 'webrtc',\n  },\n];\n\nconst App: React.FC = () => {\n  const [mode, setMode] = React.useState<Mode | undefined>();\n  const [isReady, setIsReady] = React.useState<boolean>(false);\n  const [encryptionKey, setEncryptionKey] = React.useState<string | undefined>();\n  const [localDescription, setLocalDescription] = React.useState<string | undefined>();\n  const [encryptedMessages, setEncryptedMessages] = React.useState<string[]>([]);\n  const [messages, setMessages] = React.useState<MessageType[]>([]);\n  const setAnswerDescriptionRef = React.useRef<((answerDescription: string) => void) | undefined>();\n  const sendMessageRef = React.useRef<((message: string) => void) | undefined>();\n\n  const onMessageReceived = (encryptionKey: string) => (messageString: string) => {\n    if (encryptionKey) {\n      try {\n        const decryptedMessageString = decrypt(messageString, encryptionKey);\n        const message = JSON.parse(decryptedMessageString) as MessageType;\n        setEncryptedMessages(m => [messageString, ...m]);\n        setMessages(messages => [...messages, message]);\n      } catch {}\n    }\n  };\n\n  const onChannelOpen = () => setIsReady(true);\n\n  const handleHostSelection = async () => {\n    const encryptionKey = generateKey();\n    setEncryptionKey(encryptionKey);\n    const { localDescription, setAnswerDescription, sendMessage } = await createPeerConnection({\n      iceServers,\n      onMessageReceived: onMessageReceived(encryptionKey),\n      onChannelOpen,\n    });\n    setMode(Mode.HOST);\n    sendMessageRef.current = sendMessage;\n    setAnswerDescriptionRef.current = setAnswerDescription;\n    setLocalDescription(Base64.encode(localDescription));\n  };\n\n  const handleRemoteConnectionDescriptionSubmit = (remoteConnectionDescription: ConnectionDescription) => {\n    if (setAnswerDescriptionRef.current) {\n      setAnswerDescriptionRef.current(Base64.decode(remoteConnectionDescription.description));\n    }\n  };\n\n  const handleSlaveSelection = async (connectionDescription: ConnectionDescription) => {\n    const { encryptionKey } = connectionDescription;\n    setEncryptionKey(encryptionKey);\n    const { localDescription, sendMessage } = await createPeerConnection({\n      iceServers,\n      remoteDescription: Base64.decode(connectionDescription.description),\n      onMessageReceived: onMessageReceived(encryptionKey),\n      onChannelOpen,\n    });\n    setMode(Mode.SLAVE);\n    sendMessageRef.current = sendMessage;\n    setLocalDescription(Base64.encode(localDescription));\n  };\n\n  const handleChatSendMessage = (messageToSend: string) => {\n    if (sendMessageRef.current && encryptionKey) {\n      const message: MessageType = {\n        id: Math.random().toFixed(10),\n        sender: MESSAGE_SENDER.STRANGER,\n        type: MESSAGE_TYPE.TEXT,\n        payload: messageToSend,\n      };\n\n      const messageString = JSON.stringify(message);\n      const encryptedMessageString = encrypt(messageString, encryptionKey);\n      sendMessageRef.current(encryptedMessageString);\n      setEncryptedMessages(m => [encryptedMessageString, ...m]);\n      setMessages(messages => [\n        ...messages,\n        {\n          ...message,\n          sender: MESSAGE_SENDER.ME,\n        },\n      ]);\n    }\n  };\n\n  const localConnectionDescription = {\n    description: localDescription as string,\n    encryptionKey: encryptionKey as string,\n  } as ConnectionDescription;\n  const textMessages = messages.filter(m => m.type === MESSAGE_TYPE.TEXT);\n\n  return (\n    <Wrapper>\n      <Title style={{ textAlign: 'center' }}>pitu-pitu</Title>\n      <Subtitle style={{ textAlign: 'center' }}>p2p chat on WebRTC with additional AES256 encryption</Subtitle>\n      <Space size={24} />\n      {!mode && <HostOrSlave onHost={handleHostSelection} onSlave={handleSlaveSelection} />}\n      {mode === Mode.HOST && !isReady && (\n        <Host connectionDescription={localConnectionDescription} onSubmit={handleRemoteConnectionDescriptionSubmit} />\n      )}\n      {mode === Mode.SLAVE && !isReady && <Slave connectionDescription={localConnectionDescription} />}\n      {mode && isReady && <Chat messages={textMessages} sendMessage={handleChatSendMessage} />}\n      <Space size={24} />\n      <Version>v2.0.0</Version>\n      <Space size={64} />\n      <Card>\n        <DetailsWrapper>\n          <DetailsLabel>ICE Servers used to establish connection:</DetailsLabel>\n          <DetailsValue>{JSON.stringify(iceServers, null, 2)}</DetailsValue>\n        </DetailsWrapper>\n        <DetailsWrapper>\n          <DetailsLabel>Encryption key:</DetailsLabel>\n          <DetailsValue>{encryptionKey}</DetailsValue>\n        </DetailsWrapper>\n        <DetailsWrapper>\n          <DetailsLabel>Encrypted messages:</DetailsLabel>\n          <DetailsValue>{JSON.stringify(encryptedMessages, null, 2)}</DetailsValue>\n        </DetailsWrapper>\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport copy from 'copy-to-clipboard';\n\nimport { Input } from 'antd';\nimport 'antd/es/input/style/css';\nimport { Card } from 'antd';\nimport 'antd/es/card/style/css';\nimport { Typography } from 'antd';\nimport 'antd/es/typography/style/css';\n\nimport { ConnectionDescription } from '../../types/ConnectionDescription';\nimport { Space } from '../Space/Space';\nimport { encode, decode } from '../../util/connectionDescriptionEncoding';\nimport { connectionDescriptionValidator } from '../../util/connectionDescriptionValidator';\n\nexport interface HostProps {\n  connectionDescription: ConnectionDescription;\n  onSubmit: (remoteConnectionDescription: ConnectionDescription) => any;\n}\n\nexport const Host: React.FC<HostProps> = ({ connectionDescription, onSubmit }) => {\n  const [remoteConnectionDescription, setRemoteConnectionDescription] = React.useState<string>('');\n  const [error, setError] = React.useState<string>('');\n\n  const encodedConnectionDescription = encode(connectionDescription);\n\n  const handleCopyClick = () => {\n    copy(encodedConnectionDescription);\n  };\n\n  const handleRemoteConnectionDescriptionInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setError('');\n    setRemoteConnectionDescription(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    try {\n      const connectionDescriptionObject = decode(remoteConnectionDescription);\n      if (connectionDescriptionValidator(connectionDescriptionObject)) throw new Error();\n      onSubmit(connectionDescriptionObject);\n    } catch (error) {\n      setError('Connection Description invalid!');\n    }\n  };\n\n  return (\n    <Card>\n      <Typography.Text>Send this code to other person:</Typography.Text>\n      <Space size={4} />\n      <Input.Search\n        type=\"text\"\n        value={encodedConnectionDescription}\n        enterButton=\"Copy to clipboard\"\n        onSearch={handleCopyClick}\n      />\n      <Space size={24} />\n      <Typography.Text>Code from your buddy:</Typography.Text>\n      <Space size={4} />\n      <Input.Search\n        type=\"text\"\n        value={remoteConnectionDescription}\n        onChange={handleRemoteConnectionDescriptionInputChange}\n        placeholder=\"Paste an answer code\"\n        enterButton=\"Connect\"\n        onSearch={handleSubmit}\n      />\n      {!!error && (\n        <React.Fragment>\n          <Space size={8} />\n          <Typography.Text>{error}</Typography.Text>\n        </React.Fragment>\n      )}\n    </Card>\n  );\n};\n","import React from 'react';\nimport copy from 'copy-to-clipboard';\n\nimport { Input } from 'antd';\nimport 'antd/es/input/style/css';\nimport { Card } from 'antd';\nimport 'antd/es/card/style/css';\nimport { Typography } from 'antd';\nimport 'antd/es/typography/style/css';\n\nimport { ConnectionDescription } from '../../types/ConnectionDescription';\nimport { Space } from '../Space/Space';\nimport { encode } from '../../util/connectionDescriptionEncoding';\n\nexport interface SlaveProps {\n  connectionDescription: ConnectionDescription;\n}\n\nexport const Slave: React.FC<SlaveProps> = ({ connectionDescription }) => {\n  const encodedConnectionDescription = encode(connectionDescription);\n\n  const handleCopyClick = () => {\n    copy(encodedConnectionDescription);\n  };\n\n  return (\n    <Card>\n      <Typography.Text>Send this code to other person:</Typography.Text>\n      <Space size={4} />\n      <Input.Search\n        type=\"text\"\n        value={encodedConnectionDescription}\n        enterButton=\"Copy to clipboard\"\n        onSearch={handleCopyClick}\n      />\n    </Card>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}